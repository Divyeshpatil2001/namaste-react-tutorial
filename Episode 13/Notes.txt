# types of testing (devleoper):
- unit testing - small unit of app
- integration testing - many components collabrate to make feature it is integration of so many components this testing 
-- there are multiple components talking to each other will develop a flow of an react app
- end to end testing (e2e) - user lands on the webiste to leaves the website will test all the flows


# setting up testing in our app
- install react testing library
- install jest
- install babel dependecies 
- create babel config js file
- configure parcel config file to disable Babel transpilation
- jest configuration -- npx jest init 
- install jsdom library 
- install @babel/preset-react - to make jsx works in test case
- include @babel/preset-react - inside my babel config
- install testing-library/jest-dom - for testinf function (eg:toBeInTheDocument
)

--- this testing babel might be issue because we have parcel and it is using its own babel 
--solution -- we have to tell parcel to not use their default babel instead use testing one babel configuration
-- docs to parcel -> babel -> usage with other tools

- __a__ = dunder method(__ __) first and last underscore

# steps for test case to render component or not and check assertion
- render
- querying
- assertion (expect to this)

-- "watch-test": "jest --watch" - add for continue server running for testng like parcel run like hmrs after saving website update like wise in terms of jsdom envirnoment

// whenwver we use fetch async state update in component then for test case we have to wrap in the act() method
// act() - helps to make sure all the useEffect and other async code is executed before we do any assertion or testing
// import { act } from "react-dom/test-utils";


// for click - fore event
// if dont know role or text so we can check using getbytestid just in element we have to add data-testid attribute
// like <input data-testid="searchInput" />
// then in test file we can use screen.getByTestId("searchInput")